apply from: rootProject.file('gradle/dependencies.gradle')
apply from: rootProject.file('gradle/repositories.gradle')
apply from: rootProject.file('gradle/profile.gradle')
apply from: rootProject.file('gradle/plugins.gradle')
apply from: rootProject.file('gradle/publish.gradle')

buildscript { scriptHandler ->
    apply from: rootProject.file('gradle/dependencies.gradle')
    apply from: rootProject.file('gradle/repositories.gradle')

    repositories.addAll(extRepo)

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslGradlePluginVersion}"
        classpath "io.franzbecker:gradle-lombok:${lombokPluginVersion}"
        classpath "net.ltgt.gradle:gradle-apt-plugin:${aptPluginVersion}"
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

def generatedOutputDirectory = "${projectDir}/src/main/generated"
def generatedOutput = file(generatedOutputDirectory)

sourceSets {
    main {
        java {
            srcDirs += generatedOutput
        }
    }
    generated {
        java {
            srcDirs += generatedOutput
        }
    }
    test {
        java {
            srcDirs += generatedOutput
        }
    }
}

querydsl {
    querydslSourcesDir = generatedOutput
    jpa = true
}

jar {
    baseName = "${baseArtifact}"
    version = "${baseVersion}"
}

bootRun {
    if (profile != null) {
        args = ["--spring.profiles.active=" + profile]
    }

    addResources = true
}

dependencies {

    compile "com.vroong:vroong-api-client:${vroongApiClientVersion}"
    compile "com.vroong:vroong-admin-api-client:${vroongAdminApiClientVersion}"
    compile "com.meshprime:prime-api-client:${primeApiClientVersion}"

    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-data-rest"
    compile "org.springframework.boot:spring-boot-starter-jta-atomikos"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-starter-validation"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf"

    compile "org.springframework.security:spring-security-web:${springSecurityVersion}"
    compile "org.springframework.security.oauth:spring-security-oauth2:${springSecurityOauth2Version}"
    compile "org.springframework.security:spring-security-jwt:${springSecurityJwtVersion}"

    // QueryDSL
    compile "com.querydsl:querydsl-apt:${querydslVersion}"
    compile "com.querydsl:querydsl-jpa:${querydslVersion}"
    compile "com.querydsl:querydsl-sql:${querydslVersion}"
    compile "com.querydsl:querydsl-collections:${querydslVersion}"

    // MyBatis JSR310 Support
    compile "org.mybatis.spring.boot:mybatis-spring-boot-starter:${myBatisSpringBootVersion}"
    compile "org.mybatis:mybatis-typehandlers-jsr310:${mybatisTypehandlersVersion}"

    compile "mysql:mysql-connector-java:${mysqlConnectorVersion}"

    compile "org.apache.httpcomponents:fluent-hc:${apacheHttpcomponentsVersion}"

    // Swagger
    compile "io.springfox:springfox-swagger2:${springfoxVersion}"
    compile "io.springfox:springfox-swagger-ui:${springfoxVersion}"

    // jackson
    compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    // Jackson JSR310 Support
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"

    // poi
    compile "org.apache.poi:poi:${poiVersion}"
    compile "org.apache.poi:poi-ooxml:${poiVersion}"

    compile "org.mapstruct:mapstruct-jdk8:${mapstructVersion}"

    compile "org.apache.commons:commons-lang3:${commonsLang3Version}"

    compile "com.auth0:java-jwt:${javaJwtVersion}"

    compile files("${projectDir}/libs/ICERTSecu_JDK18.jar")

    apt "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    apt "org.projectlombok:lombok:${lombokVersion}"

    compileOnly "org.springframework.boot:spring-boot-configuration-processor"

    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.springframework.security:spring-security-test"
}

compileJava {
    options.compilerArgs << "-s"
    options.compilerArgs << generatedOutputDirectory

    options.compilerArgs = [
        '-Amapstruct.suppressGeneratorTimestamp=true',
        '-Amapstruct.suppressGeneratorVersionInfoComment=true',
        '-Amapstruct.unmappedTargetPolicy=IGNORE'
    ]
    doFirst {
        generatedOutput.mkdirs()
    }
}

project.afterEvaluate {
    project.tasks.compileQuerydsl.options.compilerArgs = [
        "-proc:only",
        "-processor", project.querydsl.processors()
            + ',lombok.launch.AnnotationProcessorHider$AnnotationProcessor'
    ]
}

clean.doLast {
    generatedOutput.deleteDir()
}

task wrapper(type: Wrapper) {
    gradleVersion = "${gradleWrapperVersion}"
}
