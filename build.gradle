apply from: rootProject.file('gradle/dependencies.gradle')
apply from: rootProject.file('gradle/repositories.gradle')
apply from: rootProject.file('gradle/profile.gradle')
apply from: rootProject.file('gradle/plugins.gradle')
apply from: rootProject.file('gradle/publish.gradle')

buildscript { scriptHandler ->
	apply from: rootProject.file('gradle/dependencies.gradle')
	apply from: rootProject.file('gradle/repositories.gradle'), to: scriptHandler
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
	}
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

configurations.all {
	resolutionStrategy.cacheDynamicVersionsFor 10, 'seconds' // 10초
	resolutionStrategy.cacheChangingModulesFor 10, 'seconds' // 10초
}

sourceSets {
	main {
		java {
			srcDir file("${projectDir}/src/main/java")
		}
	}
	generated {
		java {
			srcDir file("${projectDir}/src/main/java/generated")
		}
	}
}

idea {
	module {
		sourceDirs += file("${projectDir}/src/main/java/generated")
		testSourceDirs += file("${projectDir}/src/test/generated")
	}
}

jar {
	baseName = "${baseArtifact}"
	version = "${baseVersion}"
}

bootRun {
	if (profile != null) {
		args = ["--spring.profiles.active=" + profile]
	}

	addResources = true
}

dependencies {
	compile "net.meshkorea:platform-core-web:${coreWebVersion}"

	compile "com.vroong:vroong-api-client:${vroongApiClientVersion}"
	compile "com.vroong:vroong-admin-api-client:${vroongAdminApiClientVersion}"
	compile "com.meshprime:prime-api-client:${primeApiClientVersion}"

	// Swagger
	compile "io.springfox:springfox-swagger2:${springfoxVersion}"
	compile "io.springfox:springfox-swagger-ui:${springfoxVersion}"

	compile "com.mysema.querydsl:querydsl-jpa:${mysemaQuerydslVersion}"
	compile "com.mysema.querydsl:querydsl-apt:${mysemaQuerydslVersion}:jpa"

	compile("org.springframework.ldap:spring-ldap-core")
	compile("org.springframework.security:spring-security-ldap")

	compile "com.auth0:java-jwt:${javaJwtVersion}"

	compileOnly "org.springframework.boot:spring-boot-configuration-processor"

	testCompile "org.springframework.boot:spring-boot-starter-test"
	testCompile "org.springframework.security:spring-security-test"
}

compileJava {
	options.compilerArgs << "-s"
	options.compilerArgs << "${projectDir}/src/main/java/generated"

	doFirst {
		file("${projectDir}/src/main/java/generated").mkdirs()
	}
}

clean.doLast {
	file("${projectDir}/src/main/java/generated").deleteDir()
}

task wrapper(type: Wrapper) {
	gradleVersion = '3.4.1'
}
